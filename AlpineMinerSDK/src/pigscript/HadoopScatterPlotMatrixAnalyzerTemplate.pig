-- This is the template pig script to generate for given column pairs the values to calculate correlation among 
-- pair of columns
-- DONOT change variable names


aScatterPlotColumnspigVariable = FOREACH pigVariable generateXXX
preCalculationpigVariable = GROUP aScatterPlotColumnspigVariable  ALL;
agPrNumberpigVariable = FOREACH preCalculationpigVariable GENERATE AlpinePiggyScatterPlotterMatrix(aScatterPlotColumnspigVariable);
samplePlotColumnspigVariable = SAMPLE aScatterPlotColumnspigVariable 1MAXAllowedRows/summationOfAllpigVariable.TotalCount;
/*
-- Sample generated code

FILE_1343782640946_0 = load 'hdfs://10.0.0.100:8200/shillion/shillion2/APL.csv' USING PigStorage(',')  as (exchange:chararray,stock_symbol:chararray,trade_date:chararray,stock_price_open:double,stock_price_high:double,stock_price_low:double,stock_price_close:double,stock_volume:int,stock_price_adj_close:double);
aScatterPlotColumns = FOREACH FILE_1343782640946_0 generate stock_price_adj_close as stock_price_adj_closeX0,stock_price_close as stock_price_closeX1,stock_price_high as stock_price_highX2,stock_price_low as stock_price_lowX3,stock_price_open as stock_price_openX4,stock_volume as stock_volumeX5;

aScatterPlotColumns = FOREACH FILE_1343782640946_0 generate stock_price_adj_close as stock_price_adj_closeX0,stock_price_close as stock_price_closeX1,stock_price_high as stock_price_highX2,stock_price_low as stock_price_lowX3,stock_price_open as stock_price_openX4,stock_volume as stock_volumeX5;
preCalculation = FOREACH aScatterPlotColumns generate stock_price_adj_closeX0 as stock_price_adj_closeX0,stock_price_openX4 as stock_price_openX4,stock_volumeX5 as stock_volumeX5,stock_price_highX2 as stock_price_highX2,stock_price_closeX1 as stock_price_closeX1,stock_price_lowX3 as stock_price_lowX3,(stock_price_adj_closeX0*stock_volumeX5) as stock_price_adj_closeX0stock_volumeX5,(stock_price_adj_closeX0*stock_price_openX4) as stock_price_adj_closeX0stock_price_openX4,(stock_price_adj_closeX0*stock_price_adj_closeX0) as stock_price_adj_closeX0stock_price_adj_closeX0,(stock_price_adj_closeX0*stock_price_highX2) as stock_price_adj_closeX0stock_price_highX2,(stock_price_adj_closeX0*stock_price_lowX3) as stock_price_adj_closeX0stock_price_lowX3,(stock_price_adj_closeX0*stock_price_closeX1) as stock_price_adj_closeX0stock_price_closeX1,(stock_price_openX4*stock_price_openX4) as stock_price_openX4stock_price_openX4,(stock_price_openX4*stock_volumeX5) as stock_price_openX4stock_volumeX5,(stock_volumeX5*stock_volumeX5) as stock_volumeX5stock_volumeX5,(stock_price_highX2*stock_price_openX4) as stock_price_highX2stock_price_openX4,(stock_price_highX2*stock_price_lowX3) as stock_price_highX2stock_price_lowX3,(stock_price_highX2*stock_price_highX2) as stock_price_highX2stock_price_highX2,(stock_price_highX2*stock_volumeX5) as stock_price_highX2stock_volumeX5,(stock_price_closeX1*stock_price_lowX3) as stock_price_closeX1stock_price_lowX3,(stock_price_closeX1*stock_volumeX5) as stock_price_closeX1stock_volumeX5,(stock_price_closeX1*stock_price_highX2) as stock_price_closeX1stock_price_highX2,(stock_price_closeX1*stock_price_closeX1) as stock_price_closeX1stock_price_closeX1,(stock_price_closeX1*stock_price_openX4) as stock_price_closeX1stock_price_openX4,(stock_price_lowX3*stock_volumeX5) as stock_price_lowX3stock_volumeX5,(stock_price_lowX3*stock_price_openX4) as stock_price_lowX3stock_price_openX4,(stock_price_lowX3*stock_price_lowX3) as stock_price_lowX3stock_price_lowX3; 
grpdPreCalculation = GROUP preCalculation ALL;
summationOfAll1343787444359 = FOREACH grpdPreCalculation generate COUNT(preCalculation.stock_price_adj_closeX0) as TotalCount,SUM(preCalculation.stock_price_adj_closeX0) as countstock_price_adj_closeX0,SUM(preCalculation.stock_price_openX4) as countstock_price_openX4,SUM(preCalculation.stock_volumeX5) as countstock_volumeX5,SUM(preCalculation.stock_price_highX2) as countstock_price_highX2,SUM(preCalculation.stock_price_closeX1) as countstock_price_closeX1,SUM(preCalculation.stock_price_lowX3) as countstock_price_lowX3,SUM(preCalculation.stock_price_adj_closeX0stock_volumeX5) as sumstock_price_adj_closeX0stock_volumeX5,SUM(preCalculation.stock_price_adj_closeX0stock_price_openX4) as sumstock_price_adj_closeX0stock_price_openX4,SUM(preCalculation.stock_price_adj_closeX0stock_price_adj_closeX0) as sumstock_price_adj_closeX0stock_price_adj_closeX0,SUM(preCalculation.stock_price_adj_closeX0stock_price_highX2) as sumstock_price_adj_closeX0stock_price_highX2,SUM(preCalculation.stock_price_adj_closeX0stock_price_lowX3) as sumstock_price_adj_closeX0stock_price_lowX3,SUM(preCalculation.stock_price_adj_closeX0stock_price_closeX1) as sumstock_price_adj_closeX0stock_price_closeX1,SUM(preCalculation.stock_price_openX4stock_price_openX4) as sumstock_price_openX4stock_price_openX4,SUM(preCalculation.stock_price_openX4stock_volumeX5) as sumstock_price_openX4stock_volumeX5,SUM(preCalculation.stock_volumeX5stock_volumeX5) as sumstock_volumeX5stock_volumeX5,SUM(preCalculation.stock_price_highX2stock_price_openX4) as sumstock_price_highX2stock_price_openX4,SUM(preCalculation.stock_price_highX2stock_price_lowX3) as sumstock_price_highX2stock_price_lowX3,SUM(preCalculation.stock_price_highX2stock_price_highX2) as sumstock_price_highX2stock_price_highX2,SUM(preCalculation.stock_price_highX2stock_volumeX5) as sumstock_price_highX2stock_volumeX5,SUM(preCalculation.stock_price_closeX1stock_price_lowX3) as sumstock_price_closeX1stock_price_lowX3,SUM(preCalculation.stock_price_closeX1stock_volumeX5) as sumstock_price_closeX1stock_volumeX5,SUM(preCalculation.stock_price_closeX1stock_price_highX2) as sumstock_price_closeX1stock_price_highX2,SUM(preCalculation.stock_price_closeX1stock_price_closeX1) as sumstock_price_closeX1stock_price_closeX1,SUM(preCalculation.stock_price_closeX1stock_price_openX4) as sumstock_price_closeX1stock_price_openX4,SUM(preCalculation.stock_price_lowX3stock_volumeX5) as sumstock_price_lowX3stock_volumeX5,SUM(preCalculation.stock_price_lowX3stock_price_openX4) as sumstock_price_lowX3stock_price_openX4,SUM(preCalculation.stock_price_lowX3stock_price_lowX3) as sumstock_price_lowX3stock_price_lowX3;
samplePlotColumns1343787444359 = SAMPLE aScatterPlotColumns 2000.0/summationOfAll1343787444359.TotalCount;

*/